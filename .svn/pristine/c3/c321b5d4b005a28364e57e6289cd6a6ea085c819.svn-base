using System;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using DayPilot.Web.Ui;
using DayPilot.Web.Ui.Recurrence;

namespace Data
{
    public class DataManager
    {

        private DbDataAdapter CreateDataAdapter(string select)
        {
            DbDataAdapter da = Factory.CreateDataAdapter();
            da.SelectCommand = CreateCommand(select);
            return da;
        }

        public DataTable GetRecords(int employee)
        {
            var da = CreateDataAdapter("select * from [Timesheet] where [EmployeeId] = @employee order by [TimesheetIn]");
            AddParameterWithValue(da.SelectCommand, "employee", employee);
            DataTable dt = new DataTable();
            da.Fill(dt);
            return dt;
        }
        
        public DataTable GetEmployees()
        {
            var da = CreateDataAdapter("select * from [Employee] order by [EmployeeName]");
            DataTable dt = new DataTable();
            da.Fill(dt);
            return dt;
        }

        public DataRow GetEmployee(int id)
        {
            var da = CreateDataAdapter("select * from [Employee] where [EmployeeId] = @id");
            AddParameterWithValue(da.SelectCommand, "id", id);
            DataTable dt = new DataTable();
            da.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                return dt.Rows[0];
            }
            return null;
        }


        #region Helper methods
        private string ConnectionString
        {
            get { return Db.ConnectionString(); }
        }

        private DbProviderFactory Factory
        {
            get { return Db.Factory(); }
        }

        private DbConnection CreateConnection()
        {
            DbConnection connection = Factory.CreateConnection();
            connection.ConnectionString = ConnectionString;
            return connection;
        }

        private DbCommand CreateCommand(string text)
        {
            DbCommand command = Factory.CreateCommand();
            command.CommandText = text;
            command.Connection = CreateConnection();

            return command;
        }

        private DbCommand CreateCommand(string text, DbConnection connection)
        {
            DbCommand command = Factory.CreateCommand();
            command.CommandText = text;
            command.Connection = connection;

            return command;
        }

        private void AddParameterWithValue(DbCommand cmd, string name, object value)
        {
            var parameter = Factory.CreateParameter();
            parameter.Direction = ParameterDirection.Input;
            parameter.ParameterName = name;
            parameter.Value = value;
            cmd.Parameters.Add(parameter);
        }

        private int GetIdentity(DbConnection c)
        {
            var cmd = CreateCommand(Db.IdentityCommand(), c);
            return Convert.ToInt32(cmd.ExecuteScalar());
        }

        #endregion

        public void DeleteRecord(int id)
        {
            using (var con = CreateConnection())
            {
                con.Open();

                var cmd = CreateCommand("delete from [Timesheet] where [TimesheetId] = @id", con);
                AddParameterWithValue(cmd, "id", id);
                cmd.ExecuteNonQuery();

            }
        }

        public void MoveRecord(int id, DateTime start, DateTime end)
        {
            using (var con = CreateConnection())
            {
                con.Open();

                var cmd = CreateCommand("update [Timesheet] set [TimesheetIn] = @start, [TimesheetOut] = @end where [TimesheetId] = @id", con);
                AddParameterWithValue(cmd, "id", id);
                AddParameterWithValue(cmd, "start", start);
                AddParameterWithValue(cmd, "end", end);
                cmd.ExecuteNonQuery();
            }
        }

        public void CreateRecord(DateTime start, DateTime end, int employee,int payrate)
        {
            using (DbConnection con = CreateConnection())
            {
                con.Open();

                var cmd = CreateCommand("insert into [Timesheet] ([TimesheetIn], [TimesheetOut], [EmployeeId], [EmployeeRate] ) values (@start, @end, @employee,@payrate)", con);
                AddParameterWithValue(cmd, "start", start);
                AddParameterWithValue(cmd, "end", end);
                AddParameterWithValue(cmd, "employee", employee);
                AddParameterWithValue(cmd, "payrate", payrate);
                cmd.ExecuteNonQuery();

            }
        }

        public DataRow GetRecord(int id)
        {
            var da = CreateDataAdapter("select * from [Timesheet] where [TimesheetId] = @id");
            AddParameterWithValue(da.SelectCommand, "id", id);
            DataTable dt = new DataTable();
            da.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                return dt.Rows[0];
            }
            return null;
        }

        public void UpdateRecord(int id, DateTime start, DateTime end, int EmpRate)
        {
            using (var con = CreateConnection())
            {
                con.Open();

                var cmd = CreateCommand("update [Timesheet] set [TimesheetIn] = @start, [TimesheetOut] = @end , [EmployeeRate] = @EmpRate where [TimesheetId] = @id", con);
                AddParameterWithValue(cmd, "id", id);
                AddParameterWithValue(cmd, "start", start);
                AddParameterWithValue(cmd, "end", end);
                AddParameterWithValue(cmd, "EmpRate", EmpRate);
                cmd.ExecuteNonQuery();
            }
        }

        public TimeSpan GetTotalMinutesForDay(DateTime day, int employee)
        {
            DateTime start = day.Date;
            DateTime end = start.AddDays(1);

            var da = CreateDataAdapter("select * from [Timesheet] where [EmployeeId] = @employee and NOT (([TimesheetOut] <= @start) OR ([TimesheetIn] >= @end)) order by [TimesheetIn]");
            AddParameterWithValue(da.SelectCommand, "employee", employee);
            AddParameterWithValue(da.SelectCommand, "start", start);
            AddParameterWithValue(da.SelectCommand, "end", end);
            DataTable dt = new DataTable();
            da.Fill(dt);

            TimeSpan total = TimeSpan.Zero;
            foreach(DataRow dr in dt.Rows)
            {
                total += TotalMinutes(dr);
            }
            return total;
        }

        private static TimeSpan TotalMinutes(DataRow dr)
        {
            DateTime start = (DateTime)dr["TimesheetIn"];
            DateTime end = (DateTime)dr["TimesheetOut"];

            return (end - start);
        }
    }
}